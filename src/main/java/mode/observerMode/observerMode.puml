@startuml
interface Observer {
    void dataChange(String message);
}
abstract class Subject {
    protected List<Observer> observers=new ArrayList<>();
    public void add(Observer observer);
    public void remove(Observer observer);
    public abstract void notifyObserver(String message);
}
class ConcreteObserver implements Observer{
    public void dataChange(String message);
}
class ConcreteSubject extends Subject{
    public void notifyObserver(String message) {
        for (Observer observer : observers) {
            System.out.println("通知所有观察者，消息更新");
            observer.dataChange(message);
        }}
}
Subject ..> Observer
class Main{}
Main ..>ConcreteSubject
@enduml